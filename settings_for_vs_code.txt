1) Установить VS Code
    - Включить автосохранение
2) Установить плагины:
    - Live Server
    - Auto Rename Tag
    - W3C Web Validator
    - Prettier
    - Stilelint
    По желанию:
    - Post CSS Sorting
    - EditorConfig
    - Scroll Viewport
3) Установить GitBash:
    1. Создать папку для проектов в C:\Users\User 
    2. Задать глобальное имя пользователя
        git config --global user.name "User Name" 
    3. Задать почту пользователя
        git config --global user.email "username@yandex.ru"
    4. Проверяем заданные настройки
        git config --list
4) Сгенерировать SSH-ключи:
    1. Перейти в основной репозиторий
        cd ~
    2. Проверить наличие ключей и удалить их
        -ls -la .ssh/
    3. Сгенерировать ключ
        ssh-keygen -t ed25519 -C "username@yandex.ru"
    ИЛИ
        ssh-keygen -t rsa -b 4096 -C "username@yandex.ru"
    4. Enter, Создаем пароль х2
    5. Запустить агента-ssh:
        eval $(ssh-agent -s)
    6. Привязать ключ к агенту (по желанию):
        # для ed25519: ssh-add ~/.ssh/id_ed25519
        # для rsa: ssh-add ~/.ssh/id_rsa
    7. Скопировать приватный ключ:
        # для ed25519: clip < ~/.ssh/id_ed25519.pub
        # для rsa: clip < ~/.ssh/id_rsa.pub
    8. Перейти на GitHub, зайти в Settings
        Выбрать пункт SSH and GPG keys
        Нажать "New SSH key or Add SSH key"
        Задать название и вставить ключ в "key"
        Сохранить
5) Связать локальный репозиторий:
    1. Зайти в профиль на GitHub
    2. Создать репозиторий
        Задать имя, видимость, создать readme.md
    3. Выбрать SSH ссылку
    4. Инициализировать репозиторий
        git init
    5. Связать репозиторий
        git remote add origin git@github.com:username/project.git 
    6. На всякий случай переименовать ветку
        git branch -M main 
    7. Залогиниться в VS Code и запушить репозиторий
6) Установить Node.js и npm:
    1. Установить Node.js LTS
        https://nodejs.org
    2. Проверить в терминале версии node -v и npm -v
    3. Создать тестовый проект для хранения настроек
    4. Инициализировать npm в тестовом проекте
        npm init
    5. Клонировать репозиторий с пресетами:
        git clone https://github.com/Cybiomez/my_presets.git
    ИЛИ
        Установить необходимые зависимости:
            npm i prettier --save-dev
            npm i stylelint --save-dev
            npm i normalize.css
    6. Забрать репозиторий себе (по желанию)
        Создать свой репозиторий на GitHub
            git remote set-url origin git@github.com:username/my_presets.git
    7. Скопировать пресет из
        my_presets_first_commit/settings_for_new_project 
7) Настроить Post CSS Sorting:
    1. Открыть Settings
    2. Найти Post CSS Sorting Config и открыть settings.json
    3. Вставить часть в "postcssSorting.config" код из файла
        settings_for_postcss_sorting.json
    4. При нажатии F1 в файле .css выбрать сортировку PostCSS
8) Настроить EditorConfig:
    1. В корене проекта создать файл
        .editorconfig
    2. Поместить в него следующие настройки:
        root = true
        [*]
        indent_style = space
        indent_size = 2
        end_of_line = lf
        charset = utf-8
        trim_trailing_whitespace = true
        insert_final_newline = true
9) Переход на автоматизацию:
    1. Создать папрку src в папке проекта
        Это будет папка с исходниками
    2. Перевести Prettier и Stylelint в devDependencies
        npm i prettier --save-dev
        npm i stylelint --save-dev
    ИЛИ
        "devDependencies": {
            "prettier": "^3.3.3",
            "stylelint": "^16.9.0"
        },
    3. В пути скриптов в package.json добавить ./src
    4. Установить gulp глобально
        npm install -g gulp
    5. Установить gulp в проекткак devDependencies
        npm install gulp --save-dev 
    6. Создать в корне файл gulpfile.js
        Внести в него строку: const gulp = require('gulp');
    7. Добавить плагины
        Установить:
            Сервер просмотра в реальном времени
                npm i browser-sync --save-dev
            Плагин синхронизации удаления
                npm i del@6.0.0 --save-dev
            Плагин склеивания файлов CSS
                npm i gulp-concat-css --save-dev
            Производит сборку вопреки ошибкам
                npm i gulp-plumber --save-dev
        Добавить строки в gulpfile.js:
            const concat = require('gulp-concat-css');
            const plumber = require('gulp-plumber');
            const del = require('del');
            const browserSync = require('browser-sync').create();
        ИЛИ
            Скопировать gulpfile.js
10) Установить атомарную библиотеку Atomizer
    1. npm i atomizer
        Библиотека будет складывать стили в /dist/output.css
    2. Установить плагин Atomic CSS Snippets
    3. Создать в package.json скрипт "atomize":
        atomizer -o ./dist/output.css --watch index.html
11) Установить атомарную библиотеку Tailwind
    1. npm i -D tailwindcss
    2. Инициализировать библиотеку
        npx tailwindcss init 
        Это создатст файл библиотеки tailwind.config.js
    3. В созданном файле заменить ключ content
        ["./src/**/*.{html,js}"]
    4. Создать папку src, а в ней файл input.css
        В него добавить дерективы
            @tailwind base;
            @tailwind components;
            @tailwind utilities;
    5. Создать в package.json скрипт "tailwind"
        npx tailwindcss -i ./src/input.css -o ./dist/output.css --watch 
12) Настройка PostCSS под gulp:
    1. Установить зависимость
        npm install --save-dev postcss gulp-postcss
    2. Объявить в gulpfile.js переменную
        const postcss= require('gulp-postcss');
    3. Встроить ссылку на хранилище плагинов в css();
        function css() { const plugins = []...
    4. Встроить пайп в css(); между concat и /dist
        .pipe(concat('bundle.css'))
        .pipe(postcss(plugins))
        .pipe(gulp.dest('dist/'))
    5. Установить плагины 
        + Autoprefixer - Самостоятельно расставляет 
    вендорные префиксы по браузер-листу
        npm i autoprefixer --save-dev 
        + postcss-combine-media-query - "Склеивает" медиазапросы
        npm i postcss-combine-media-query --save-dev 
        + cssnano - Убирает из файла все лишние символы
    и преобразует весь код в одну строку
        npm i cssnano --save-dev
    6. Подключить в gulpfile.js
        const autoprefixer = require('autoprefixer'); 
        const mediaquery = require('postcss-combine-media-query');
        const cssnano = require('cssnano');
    7. Добавить в хранилище плагинов
        const plugins = [autoprefixer(), mediaquery(), cssnano()];
13) Установить плагин html-minifier
    1. Плагин сжимает и оптимизирует html
        npm i html-minifier --save-dev
    2. Подключить в gulpfile.js
        const htmlMinify = require('html-minifier'); 
    3. Добавить в html(); настройку опций
        const options = {
            removeComments: true,
            removeRedundantAttributes: true,
            removeScriptTypeAttributes: true,
            removeStyleLinkTypeAttributes: true,
            sortClassName: true,
            useShortDoctype: true,
            collapseWhitespace: true,
            minifyCSS: true,
            keepClosingSlash: true
            return gulp.src('src/**/*.html')
        .pipe(plumber())
        .on('data', function(file) {
            const buferFile = Buffer.from(htmlMinify.minify(file.contents.toString(), options))
            return file.contents = buferFile
        })
14) Установить препроцессор html Pug
    1. npm i gulp-pug --save-dev 
    2. Создать папку pages в папке src
    3. Подключить в gulpfile.json
        const gulpPug = require('gulp-pug');
    4. Создать описание задачи
        function pug() {
            return gulp.src('src/pages/**/*.pug')
            .pipe(gulpPug())
            .pipe(gulp.dest('dist/'))
            .pipe(browserSync.reload({stream: true}));
        } 
        exports.pug = pug;
    5. Создать в папке page файл index.pug
        doctype html
        html(lang="ru")
            head
                title Главная страница сайта
            body
                h1 Привет!
    6. Отключить минифакацию при необходимости
        .pipe(gulpPug({pretty: true}))
    7. Заменить отслеживание файла .html на .pug сервером
        function watchFiles() {
            gulp.watch(['src/pages/**/*.pug'], pug)...
        ...
        ...const build = gulp.series(clean, gulp.parallel(/*pug,*/ html, css, images, movies, fonts));
15) Установить препроцессор cdd SASS
    1. npm install sass gulp-sass --save-dev 
    2. Подключить в gulpfile.json
        const sass = require('gulp-sass')(require('sass'));
    3. Создать описание задачи
        function scss() {
            return gulp.src('src/**/*.scss')
                .pipe(sass())
                .pipe(gulp.dest('dist/'))
                .pipe(browserSync.reload({stream: true}));
        } 
        exports.scss = scss; 
    4. Заменить функцию сборки css на scss
        function watchFiles() {
            gulp.watch(['src/**/*.scss'], scss);...
        ...
        ...const build = gulp.series(clean, gulp.parallel(/*pug,*/ html, /*scss,*/ css, images, movies, fonts));
    5.  Перенести пайпы и плагины постпроцессинга в функцию
        function scss() {
            const plugins = [autoprefixer(), mediaquery(), cssnano()];
            return gulp.src('src/**/*.scss')
                .pipe(sass())
                .pipe(concat('bundle.css'))
                .pipe(postcss(plugins))
                .pipe(gulp.dest('dist/'))
                .pipe(browserSync.reload({stream: true}));
        }
    6. Донасроить скрипты линтеров и форматеров 
    7. Добавить зависимости для линтеров и форматеров
        npm add --save-dev prettier @prettier/plugin-pug
        npm install --save-dev stylelint-config-standard-scss
    8. Заменить stylelint.config.js
        module.exports = {"extends": "stylelint-config-standard-scss"}  
16)
        